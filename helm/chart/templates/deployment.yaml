apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: racky-app
  name: racky-app
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: racky-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: racky-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - racky-app
            topologyKey: "kubernetes.io/hostname"
      containers:
      - envFrom:
        - secretRef:
            name: racky-app-secrets
        - configMapRef:
            name: racky-app-env
        image: {{ .Values.aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com/rackoot/racky-app:{{ .Values.app_version }}
        imagePullPolicy: Always
        name: racky-app
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 3005
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: 3005
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 3005
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 30
      nodeSelector:
        eks.amazonaws.com/nodegroup: {{ .Values.node_selector }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      serviceAccount: rackoot-iam
      serviceAccountName: rackoot-iam